# -*- coding: utf-8 -*-
"""Model (30 Epoch With Testing and Validation).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vtXpqQ2iDlEARl6Zvs3csOpIw8SwYYFe
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader
import cv2
import os
from PIL import Image
from tqdm import tqdm
from google.colab import drive

drive.mount('/content/drive')

class DoubleConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

class Down(nn.Module):
    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.maxpool_conv = nn.Sequential(
            nn.MaxPool2d(2),
            DoubleConv(in_channels, out_channels)
        )

    def forward(self, x):
        return self.maxpool_conv(x)

class Up(nn.Module):
    def __init__(self, in_channels, out_channels, bilinear=True):
        super().__init__()

        if bilinear:
            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        else:
            self.up = nn.ConvTranspose2d(in_channels // 2, in_channels // 2, kernel_size=2, stride=2)

        self.conv = DoubleConv(in_channels, out_channels)

    def forward(self, x1, x2):
        x1 = self.up(x1)
        diffY = x2.size()[2] - x1.size()[2]
        diffX = x2.size()[3] - x1.size()[3]

        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
                        diffY // 2, diffY - diffY // 2])
        x = torch.cat([x2, x1], dim=1)
        return self.conv(x)

class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)

class UNet(nn.Module):
    def __init__(self, n_channels, n_classes, bilinear=True):
        super(UNet, self).__init__()
        self.n_channels = n_channels
        self.n_classes = n_classes
        self.bilinear = bilinear

        self.inc = DoubleConv(n_channels, 64)
        self.down1 = Down(64, 128)
        self.down2 = Down(128, 256)
        self.down3 = Down(256, 512)
        factor = 2 if bilinear else 1
        self.down4 = Down(512, 1024 // factor)
        self.up1 = Up(1024, 512 // factor, bilinear)
        self.up2 = Up(512, 256 // factor, bilinear)
        self.up3 = Up(256, 128 // factor, bilinear)
        self.up4 = Up(128, 64, bilinear)
        self.outc = OutConv(64, n_classes)

    def forward(self, x):
        x1 = self.inc(x)
        x2 = self.down1(x1)
        x3 = self.down2(x2)
        x4 = self.down3(x3)
        x5 = self.down4(x4)
        x = self.up1(x5, x4)
        x = self.up2(x, x3)
        x = self.up3(x, x2)
        x = self.up4(x, x1)
        logits = self.outc(x)
        return logits

from sklearn.model_selection import train_test_split
import random

# Define the dataset
class ImageDataset(Dataset):
    def __init__(self, image_paths, mask_paths, transform=None):
        self.image_paths = image_paths
        self.mask_paths = mask_paths
        self.transform = transform

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, index):
        image_path = self.image_paths[index]
        mask_path = self.mask_paths[index]

        image = Image.open(image_path).convert('RGB')
        mask = Image.open(mask_path).convert('L')

        if self.transform:
            image = self.transform(image)
            mask = self.transform(mask)

        return image, mask

# Get the list of image and mask file paths
data_dir = "/content/drive/My Drive/Dataset/Partitioned"
train_dir = os.path.join(data_dir, 'Training')
val_dir = os.path.join(data_dir, 'Validation')
test_dir = os.path.join(data_dir, 'Testing')

train_image_files = [os.path.join(train_dir, f) for f in os.listdir(train_dir) if f.endswith('.JPG')]
train_mask_files = [os.path.join(train_dir, f.replace('.JPG', '.png')) for f in os.listdir(train_dir) if f.endswith('.JPG')]

val_image_files = [os.path.join(val_dir, f) for f in os.listdir(val_dir) if f.endswith('.JPG')]
val_mask_files = [os.path.join(val_dir, f.replace('.JPG', '.png')) for f in os.listdir(val_dir) if f.endswith('.JPG')]

test_image_files = [os.path.join(test_dir, f) for f in os.listdir(test_dir) if f.endswith('.JPG')]
test_mask_files = [os.path.join(test_dir, f.replace('.JPG', '.png')) for f in os.listdir(test_dir) if f.endswith('.JPG')]

transform = transforms.Compose([
    transforms.Resize((500, 500)),
    transforms.ToTensor()
])

# Create the datasets
train_dataset = ImageDataset(train_image_files, train_mask_files, transform=transform)
val_dataset = ImageDataset(val_image_files, val_mask_files, transform=transform)
test_dataset = ImageDataset(test_image_files, test_mask_files, transform=transform)

# Create the data loaders
train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=4, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=4, shuffle=False)

# Define the model, loss function, and optimizer
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = UNet(n_channels=3, n_classes=1).to(device)
criterion = nn.BCEWithLogitsLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

def evaluate_model(model, data_loader, device, criterion):
    model.eval()
    total_loss = 0
    with torch.no_grad():
        for inputs, targets in data_loader:
            inputs = inputs.to(device)
            targets = targets.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            total_loss += loss.item()
    return total_loss / len(data_loader)

num_epochs = 30
for epoch in range(num_epochs):
    running_loss = 0.0
    progress_bar = tqdm(train_loader, total=len(train_loader), desc=f'Epoch [{epoch+1}/{num_epochs}]')
    for inputs, targets in progress_bar:
        inputs = inputs.to(device)
        targets = targets.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        progress_bar.set_postfix(loss=running_loss / (progress_bar.n + 1))

    train_loss = running_loss / len(train_loader)
    val_loss = evaluate_model(model, val_loader, device, criterion)
    print(f'Epoch [{epoch+1}/{num_epochs}] completed. Train Loss: {train_loss:.4f}, Validation Loss: {val_loss:.4f}')

test_loss = evaluate_model(model, test_loader, device, criterion)
print(f'Test Loss: {test_loss:.4f}')

# Save the trained model
torch.save(model.state_dict(), '/content/drive/My Drive/Dataset/Model/Model (30 Epoch With Testing and Validation).pth')

import numpy as np
def adaptive_threshold(input_image, true_label):
    model.eval()
    with torch.no_grad():
        input_tensor = transform(input_image).unsqueeze(0)  # Added unsqueeze(0)
        start_time = time.time()
        output = model(input_tensor)
        end_time = time.time()
        response_time = end_time - start_time
        output = torch.sigmoid(output).squeeze().cpu().numpy()
        output = (output > 0.5).astype(np.uint8) * 255
        predicted_label = np.argmax(output)
        return output, response_time, predicted_label

model = UNet(n_channels=3, n_classes=1)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.load_state_dict(torch.load('/content/drive/My Drive/Dataset/Model/Model (30 Epoch With Testing and Validation).pth', map_location=device))
model.eval()

import numpy as np
def adaptive_threshold_test(input_image):
    model.eval()
    with torch.no_grad():
        input_tensor = transform(input_image).unsqueeze(0) # Added unsqueeze(0)
        output = model(input_tensor)
        output = torch.sigmoid(output).squeeze().cpu().numpy()
        output = (output > 0.5).astype(np.uint8) * 255
        return output

import matplotlib.pyplot as plt
import time

# Example usage
input_image = Image.open('/content/drive/My Drive/Dataset/Raw for Testing/20_0.JPG')
true_label = Image.open('/content/drive/My Drive/Dataset/Raw for Testing/20_0.png')
output_image, response_time, predicted_label = adaptive_threshold(input_image, true_label)
print(f"Response time: {response_time} seconds")

import matplotlib.pyplot as plt
# Example usage
input_image = Image.open('/content/drive/My Drive/Dataset/Raw for Testing/20_1.JPG')
output_image = adaptive_threshold_test(input_image)
plt.imshow(output_image, cmap='gray')
plt.show()

# Define the transformation for the test data
test_transform = transforms.Compose([
    transforms.Resize((500, 500)),
    transforms.ToTensor()
])

# Define the pixel accuracy function
def pixel_accuracy(output, mask):
    with torch.no_grad():
        output = torch.argmax(output, dim=1)
        correct = torch.eq(output, mask).int()
        accuracy = float(correct.sum()) / float(correct.numel())
    return accuracy

# Assuming you have a trained model named 'model'
model = model.to(device)  # Move the model to the GPU
model.eval()  # Set the model to evaluation mode
accuracies = []

for images, masks in test_dataset:
    images = images.unsqueeze(0).to(device)  # Add an extra dimension for the batch size
    masks = masks.to(device)
    output = model(images)
    accuracy = pixel_accuracy(output, masks)
    accuracies.append(accuracy)

average_accuracy = sum(accuracies) / len(accuracies)
print(f'Pixel accuracy on test dataset: {average_accuracy}')

# Modified adaptive_threshold_test function
def adaptive_threshold_test_1(input_image, ground_truth_mask):
    with torch.no_grad():
        input_tensor = test_transform(input_image).unsqueeze(0).to(device)  # Move the input tensor to the GPU
        target_tensor = test_transform(ground_truth_mask).unsqueeze(0).to(device)  # Move the target tensor to the GPU

        output = model(input_tensor)

        return output, target_tensor

input_image = Image.open('/content/drive/My Drive/Dataset/Raw for Testing/20_1.JPG')
ground_truth_mask = Image.open('/content/drive/My Drive/Dataset/Raw for Testing/20_1.png')

output, target = adaptive_threshold_test_1(input_image, ground_truth_mask)
accuracy = pixel_accuracy(output, target)

print(f"Pixel Accuracy: {accuracy:.4f}")